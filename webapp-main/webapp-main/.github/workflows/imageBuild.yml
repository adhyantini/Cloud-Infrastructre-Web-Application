name: Integration Tests & Image Build
on:
  pull_request:
    types: [closed]
    branches:
      - main
jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
        
      - name: Start PostgreSQL service
        run: |
          sudo systemctl start postgresql.service

      - name: Setup Database User and Password
        run: |
          sudo -u ${{ secrets.POSTGRES_USER }} psql -c "ALTER USER ${{ secrets.POSTGRES_USER }} WITH PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"
        
      - name: Create Database
        run: |
            sudo -u ${{ secrets.POSTGRES_USER }} psql -c "CREATE DATABASE ${{ secrets.POSTGRES_DB }};"
        
      - name: Show Databases
        run: |
            sudo -u ${{ secrets.POSTGRES_USER }} psql -c "\l"

      # - name: Configure PostgreSQL to use password authentication
      #   run: |
      #      sudo sed -i "s/local   all    postgres   peer/local   all    postgres md5/" /etc/postgresql/*/main/pg_hba.conf
      #      sudo systemctl restart postgresql.service

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
         credentials_json: '${{ secrets.SERVICE_ACCOUNT_CREDS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Install Packer
        run: |
             curl -O https://releases.hashicorp.com/packer/${{ env.PACKER_VERSION }}/packer_${{ env.PACKER_VERSION }}_linux_amd64.zip
             unzip packer_${{ env.PACKER_VERSION }}_linux_amd64.zip
             sudo mv packer /usr/local/bin
        env:
          PACKER_VERSION: "1.10.0" # Specify the desired version of Packer

      - name: Create zip file
        run: zip -r webapp .
    
      - name: Move zip file to packer folder
        run: mv webapp.zip packerTemplates/

      - name: Creating env file
        run: |
           echo "DB_USER=${{ secrets.POSTGRES_USER }}" >> .env
           echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
           echo "PORT=8080" >> .env
           echo "DB_NAME=${{ secrets.POSTGRES_DB }}" >> .env
           echo "DB_HOST=${{ secrets.POSTGRES_HOST }}" >> .env

      - name: Move env to packerTemplates folder
        run: mv .env packerTemplates/

      - name: Initialise packer template
        run: |
             cd packerTemplates
             packer init .

      - name: Packer Build
        run: |
             cd packerTemplates
             packer build -var "project_id=dev-gcp-414621" -var "zone=us-central1-a" -var "source_image_family=centos-stream-8" -var "ssh_username=packer" -var "machine_type=e2-medium" -var "disk_size=100" -var "disk_type=pd-standard" .
 
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'
 
      - name: Install Dependencies
        run: npm i

      - name: Create log file and give permissions
        run: | 
          sudo touch /var/log/webapp.log
          sudo chmod -R -f 666 /var/log/webapp.log

      - name: Run Tests
        run: npm test
        env:
          DB_USER : ${{ secrets.POSTGRES_USER }}
          DB_PASSWORD : ${{ secrets.POSTGRES_PASSWORD }}
          PORT : 8080
          DB_NAME : ${{ secrets.POSTGRES_DB }}
          DB_HOST : ${{ secrets.POSTGRES_HOST }}

      - name: Get Image ID
        id: image_id
        run: |
          IMAGE_ID=$(gcloud compute images list --filter="name=centos-8-packer" --sort-by=~creationTimestamp --format="value(name)" --limit=1)
          echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV

      - name: Delete existing instance template
        run: |
              gcloud compute instance-templates delete centos1 --region=us-central1 --quiet || true


      - name: Create instance template
        run:  |
              gcloud compute instance-templates create centos2 --machine-type=e2-medium --tags=load-balanced-backend --network-interface=network=terraform-network,subnet=projects/dev-gcp-414621/regions/us-central1/subnetworks/load-balancer-subnet --instance-template-region=us-central1 --service-account=${{ secrets.service_account }} --scopes=cloud-platform --create-disk=auto-delete=yes,boot=yes,image=${{ env.IMAGE_ID }},size=100,type=pd-balanced,kms-key=${{ secrets.CRYPTO_KEY }} --metadata=startup-script=$'#!/bin/bash\nsudo -u csye6225 bash -c "cat <<EOF2 > /tmp/webapp/.env\nDB_USER=${{ secrets.DB_USER }}\nDB_PASSWORD=${{ secrets.DB_PASSWORD }}\nDB_HOST=${{ secrets.DB_HOST }}\nDB_NAME=${{ secrets.DB_NAME }}\nPORT=8080\nEOF2"'
      
      - name: Start Managed Instance Group Update
        run:  gcloud compute instance-groups managed rolling-action start-update appserver-igm --version=template=projects/dev-gcp-414621/regions/us-central1/instanceTemplates/centos2 --region=us-central1

      - name: Get instance names in Managed Instance Group
        id: get-instances
        run: |
            INSTANCES=$(gcloud compute instance-groups managed list-instances appserver-igm --region=us-central1 --format="value(NAME)")
            echo "::set-output name=instances::$INSTANCES"

      - name: Wait for Instance Group Update to Complete
        id: wait-for-refresh
        run: |
             gcloud compute instance-groups managed wait-until appserver-igm --stable --region=us-central1 --quiet

      # - name: Wait for Instance Group Update to Complete
      #   id: wait-for-refresh
      #   run: |
      #       while [[ $(gcloud compute operations list --filter="targetLink=https://www.googleapis.com/compute/v1/projects/dev-gcp-414621/regions/us-central1/instanceGroupManagers/appserver-igm AND (status!=DONE)" --format="value(status)") ]]; do
      #         echo "Waiting for MIG to refresh..."
      #         sleep 30
      #       done
      
      # - name: Start Managed Instance Group refresh of VM instances
      #   id: recreate-instances
      #   run: |
      #         INSTANCES="${{ steps.get-instances.outputs.instances }}"
      #         gcloud compute instance-groups managed recreate-instances appserver-igm --region=us-central1 --instances="$INSTANCES"
 